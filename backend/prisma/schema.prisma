// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String
  dateOfBirth   DateTime
  isVerified    Boolean  @default(false)
  bio           String?  @db.Text
  avatarUrl     String?  @db.Text
  coverPhotoUrl String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          UserRole @default(REGULAR)

  // Relationships
  interests            InterestOnUsers[]
  followers            Follow[]          @relation("Following")
  following            Follow[]          @relation("Follower")
  sentMessages         Message[]         @relation("Sender")
  receivedMessages     Message[]         @relation("Receiver")
  groupMemberships     GroupMember[]
  posts                Post[]
  likes                Like[]
  comments             Comment[]
  reposts              Repost[]
  blockedUsers         Block[]           @relation("Blocker")
  blockedByUsers       Block[]           @relation("Blocked")
  reportsMade          Report[]          @relation("Reporter")
  reportsReceived      Report[]          @relation("Reported")
  tipsGiven            Tip[]             @relation("Tipper")
  subscriptions        Subscription[]    @relation("Subscriber")
  createdTips          Tip[]             @relation("Creator")
  createdSubscriptions Subscription[]    @relation("CreatorSubscription")
  notifications        Notification[]
}

// User Role Enum
enum UserRole {
  REGULAR
  CREATOR
  MODERATOR
  ADMIN
}

// Interests Model (for user profiles)
model Interest {
  id    String            @id @default(uuid())
  name  String            @unique
  users InterestOnUsers[]
}

model InterestOnUsers {
  userId     String
  interestId String
  assignedAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  interest Interest @relation(fields: [interestId], references: [id])

  @@id([userId, interestId])
}

// Follows Model
model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

// Messages Model (for 1:1 and Group Chats)
model Message {
  id         String        @id @default(uuid())
  senderId   String
  receiverId String?
  groupId    String?
  content    String        @db.Text
  mediaUrl   String?       @db.Text
  mediaType  String? // e.g., 'image', 'video', 'audio', 'document'
  status     MessageStatus @default(SENT)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  sender   User   @relation("Sender", fields: [senderId], references: [id])
  receiver User?  @relation("Receiver", fields: [receiverId], references: [id])
  group    Group? @relation(fields: [groupId], references: [id])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

// Group Model
model Group {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members  GroupMember[]
  messages Message[]
}

// Group Member Model
model GroupMember {
  userId   String
  groupId  String
  joinedAt DateTime  @default(now())
  role     GroupRole @default(MEMBER)

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

enum GroupRole {
  MEMBER
  ADMIN
}

// Post Model (Public Posts)
model Post {
  id        String   @id @default(uuid())
  authorId  String
  content   String   @db.Text
  mediaUrl  String?  @db.Text
  mediaType String? // e.g., 'image', 'video'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User             @relation(fields: [authorId], references: [id])
  likes    Like[]
  comments Comment[]
  reposts  Repost[]
  hashtags HashtagOnPosts[]
  Report   Report[]
}

// Like Model
model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

// Comment Model
model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User     @relation(fields: [userId], references: [id])
  post   Post     @relation(fields: [postId], references: [id])
  Report Report[]
}

// Repost Model
model Repost {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

// Hashtag Model
model Hashtag {
  id    String           @id @default(uuid())
  name  String           @unique
  posts HashtagOnPosts[]
}

model HashtagOnPosts {
  postId     String
  hashtagId  String
  assignedAt DateTime @default(now())

  post    Post    @relation(fields: [postId], references: [id])
  hashtag Hashtag @relation(fields: [hashtagId], references: [id])

  @@id([postId, hashtagId])
}

// Block Model
model Block {
  blockerId String
  blockedId String
  createdAt DateTime @default(now())

  blocker User @relation("Blocker", fields: [blockerId], references: [id])
  blocked User @relation("Blocked", fields: [blockedId], references: [id])

  @@id([blockerId, blockedId])
}

// Report Model
model Report {
  id                String       @id @default(uuid())
  reporterId        String
  reportedId        String?
  reportedPostId    String?
  reportedCommentId String?
  reason            String       @db.Text
  status            ReportStatus @default(PENDING)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  reporter        User     @relation("Reporter", fields: [reporterId], references: [id])
  reported        User?    @relation("Reported", fields: [reportedId], references: [id])
  reportedPost    Post?    @relation(fields: [reportedPostId], references: [id])
  reportedComment Comment? @relation(fields: [reportedCommentId], references: [id])

  @@index([reportedId])
  @@index([reportedPostId])
  @@index([reportedCommentId])
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

// Tip Model
model Tip {
  id        String   @id @default(uuid())
  tipperId  String
  creatorId String
  amount    Float
  currency  String
  createdAt DateTime @default(now())

  tipper  User @relation("Tipper", fields: [tipperId], references: [id])
  creator User @relation("Creator", fields: [creatorId], references: [id])
}

// Subscription Model
model Subscription {
  id           String    @id @default(uuid())
  subscriberId String
  creatorId    String
  tier         String
  price        Float
  currency     String
  startDate    DateTime  @default(now())
  endDate      DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  subscriber User @relation("Subscriber", fields: [subscriberId], references: [id])
  creator    User @relation("CreatorSubscription", fields: [creatorId], references: [id])

  @@unique([subscriberId, creatorId])
}

// Notification Model
model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  content   String           @db.Text
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum NotificationType {
  MESSAGE
  LIKE
  COMMENT
  REPOST
  FOLLOW
  TIP
  SUBSCRIPTION
  ADMIN_MESSAGE
}
